{"version":3,"sources":["../../../server/users/controllers/userController.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserController","createTable","req","res","appData","connection","query","err","rows","fields","console","log","error","status","json","registerUser","today","Date","userData","body","first_name","last_name","email","password","loginUser","getConnection","length","JSON","stringify","token","sign","expiresIn","release","getUser"],"mappings":"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","file":"userController.js","sourcesContent":["var database = require('./../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass UserController {\r\n\r\n    createTable = (req, res) =>{\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        database.connection.query(`CREATE TABLE users (\r\n            id int NOT NULL PRIMARY KEY,\r\n            email varchar(255) NOT NULL UNIQUE,\r\n            first_name varchar(255) NOT NULL,\r\n            last_name varchar(255) NOT NULL,\r\n            password varchar(400) NOT NULL\r\n          )`, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"user table is created successfully \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"unable to create table user \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    registerUser= (req, res) =>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        var userData = {\r\n            \"first_name\": req.body.first_name,\r\n            \"last_name\": req.body.last_name,\r\n            \"email\": req.body.email,\r\n            \"password\": req.body.password,\r\n            \"created\": today\r\n        }\r\n    \r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData.error = 0;\r\n                        appData[\"data\"] = \"User registered successfully!\";\r\n                        res.status(201).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(err);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });*/\r\n        database.connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query is working fine \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"got error \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser = (req, res) => {\r\n        var appData = {};\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n    \r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT * FROM users WHERE email = ?', [email], function(err, rows, fields) {\r\n                    if (err) {\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(appData);\r\n                    } else {\r\n                        if (rows.length > 0) {\r\n                            if (rows[0].password == password) {\r\n                                console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                                let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                                    expiresIn: 1440\r\n                                });\r\n                                appData.error = 0;\r\n                                appData[\"token\"] = token;\r\n                                res.status(200).json(appData);\r\n                            } else {\r\n                                appData.error = 1;\r\n                                appData[\"data\"] = \"Email and Password does not match\";\r\n                                res.status(204).json(appData);\r\n                            }\r\n                        } else {\r\n                            appData.error = 1;\r\n                            appData[\"data\"] = \"Email does not exists!\";\r\n                            res.status(204).json(appData);\r\n                        }\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n\r\n    getUser = (req, res) =>{\r\n        var appData = {};\r\n\r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT *FROM users', function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData[\"error\"] = 0;\r\n                        appData[\"data\"] = rows;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"No data found\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserController;"]}