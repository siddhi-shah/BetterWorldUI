{"version":3,"sources":["../../../server/users/controllers/userController.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserController","registerUser","req","res","today","Date","appData","userData","body","first_name","last_name","email","password","query","err","rows","fields","console","log","error","status","json","loginUser","connection","getConnection","length","JSON","stringify","token","sign","expiresIn","release","getUser"],"mappings":"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","file":"userController.js","sourcesContent":["var database = require('./../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass UserController {\r\n    registerUser= (req, res) =>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        var userData = {\r\n            \"first_name\": req.body.first_name,\r\n            \"last_name\": req.body.last_name,\r\n            \"email\": req.body.email,\r\n            \"password\": req.body.password,\r\n            \"created\": today\r\n        }\r\n    \r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData.error = 0;\r\n                        appData[\"data\"] = \"User registered successfully!\";\r\n                        res.status(201).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(err);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });*/\r\n        database.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query is working fine \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"got error \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser = (req, res) => {\r\n        var appData = {};\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n    \r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT * FROM users WHERE email = ?', [email], function(err, rows, fields) {\r\n                    if (err) {\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(appData);\r\n                    } else {\r\n                        if (rows.length > 0) {\r\n                            if (rows[0].password == password) {\r\n                                console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                                let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                                    expiresIn: 1440\r\n                                });\r\n                                appData.error = 0;\r\n                                appData[\"token\"] = token;\r\n                                res.status(200).json(appData);\r\n                            } else {\r\n                                appData.error = 1;\r\n                                appData[\"data\"] = \"Email and Password does not match\";\r\n                                res.status(204).json(appData);\r\n                            }\r\n                        } else {\r\n                            appData.error = 1;\r\n                            appData[\"data\"] = \"Email does not exists!\";\r\n                            res.status(204).json(appData);\r\n                        }\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n\r\n    getUser = (req, res) =>{\r\n        var appData = {};\r\n\r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT *FROM users', function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData[\"error\"] = 0;\r\n                        appData[\"data\"] = rows;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"No data found\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserController;"]}