{"version":3,"sources":["../../../server/users/controllers/userController.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserController","executeQuery","req","res","appData","query","body","console","log","connection","err","rows","fields","JSON","stringify","error","status","json","registerUser","today","Date","userData","id","first_name","last_name","email","password","loginUser","getConnection","length","token","sign","expiresIn","release","getUser"],"mappings":"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","file":"userController.js","sourcesContent":["var database = require('./../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass UserController {\r\n\r\n    executeQuery = (req, res) =>{\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\",\r\n            \"status\":\"\",\r\n            \"dbResponse\":\"\",\r\n            \"fields\":\"\"\r\n        };\r\n        var query = req.body.query;\r\n        console.log(\"query is \"+query);\r\n        database.connection.query(query, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query executed successfully successfully \"+JSON.stringify(rows));\r\n                console.log(\"fields are \"+JSON.stringify(fields));\r\n                appData.error = 0;\r\n                appData[\"status\"] = \"success!\";\r\n                appData[\"dbResponse\"] = JSON.stringify(rows);\r\n                appData[\"fields\"] = JSON.stringify(fields);\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"Query Exception \"+err);\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    registerUser= (req, res) =>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        var userData = {\r\n            \"id\": req.body.id,\r\n            \"first_name\": req.body.first_name,\r\n            \"last_name\": req.body.last_name,\r\n            \"email\": req.body.email,\r\n            \"password\": req.body.password\r\n        }\r\n    \r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData.error = 0;\r\n                        appData[\"data\"] = \"User registered successfully!\";\r\n                        res.status(201).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(err);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });*/\r\n        database.connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query is working fine \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"got error \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser = (req, res) => {\r\n        var appData = {};\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n    \r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT * FROM users WHERE email = ?', [email], function(err, rows, fields) {\r\n                    if (err) {\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(appData);\r\n                    } else {\r\n                        if (rows.length > 0) {\r\n                            if (rows[0].password == password) {\r\n                                console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                                let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                                    expiresIn: 1440\r\n                                });\r\n                                appData.error = 0;\r\n                                appData[\"token\"] = token;\r\n                                res.status(200).json(appData);\r\n                            } else {\r\n                                appData.error = 1;\r\n                                appData[\"data\"] = \"Email and Password does not match\";\r\n                                res.status(204).json(appData);\r\n                            }\r\n                        } else {\r\n                            appData.error = 1;\r\n                            appData[\"data\"] = \"Email does not exists!\";\r\n                            res.status(204).json(appData);\r\n                        }\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n\r\n    getUser = (req, res) =>{\r\n        var appData = {};\r\n\r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT *FROM users', function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData[\"error\"] = 0;\r\n                        appData[\"data\"] = rows;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"No data found\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserController;"]}