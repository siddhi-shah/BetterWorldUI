{"version":3,"sources":["../../../server/users/controllers/userController.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserController","registerUser","req","res","today","Date","appData","userData","body","first_name","last_name","email","password","connection","getConnection","err","status","json","query","rows","fields","error","release","loginUser","length","console","log","JSON","stringify","token","sign","expiresIn","getUser"],"mappings":"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","file":"userController.js","sourcesContent":["var database = require('./../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass UserController {\r\n    registerUser= (req, res) =>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        var userData = {\r\n            \"first_name\": req.body.first_name,\r\n            \"last_name\": req.body.last_name,\r\n            \"email\": req.body.email,\r\n            \"password\": req.body.password,\r\n            \"created\": today\r\n        }\r\n    \r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData.error = 0;\r\n                        appData[\"data\"] = \"User registered successfully!\";\r\n                        res.status(201).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(err);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser = (req, res) => {\r\n        var appData = {};\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n    \r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT * FROM users WHERE email = ?', [email], function(err, rows, fields) {\r\n                    if (err) {\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(appData);\r\n                    } else {\r\n                        if (rows.length > 0) {\r\n                            if (rows[0].password == password) {\r\n                                console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                                let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                                    expiresIn: 1440\r\n                                });\r\n                                appData.error = 0;\r\n                                appData[\"token\"] = token;\r\n                                res.status(200).json(appData);\r\n                            } else {\r\n                                appData.error = 1;\r\n                                appData[\"data\"] = \"Email and Password does not match\";\r\n                                res.status(204).json(appData);\r\n                            }\r\n                        } else {\r\n                            appData.error = 1;\r\n                            appData[\"data\"] = \"Email does not exists!\";\r\n                            res.status(204).json(appData);\r\n                        }\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n\r\n    getUser = (req, res) =>{\r\n        var appData = {};\r\n\r\n        database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT *FROM users', function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData[\"error\"] = 0;\r\n                        appData[\"data\"] = rows;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"No data found\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default UserController;"]}