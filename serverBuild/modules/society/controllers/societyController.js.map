{"version":3,"sources":["../../../../server/modules/society/controllers/societyController.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","SocietyController","executeQuery","req","res","appData","query","body","console","log","connection","err","rows","JSON","stringify","error","status","json","registerUser","today","Date","userData","email","first_name","last_name","password","phoneNumber","fields","loginUser","dbResponse","length","token","sign","expiresIn","getUser"],"mappings":"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","file":"societyController.js","sourcesContent":["var database = require('../../../../database/database');\r\nvar cors = require('cors')\r\nvar jwt = require('jsonwebtoken');\r\nprocess.env.SECRET_KEY = \"varunv\";\r\n\r\nclass SocietyController {\r\n\r\n    executeQuery = (req, res) =>{\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\",\r\n            \"status\":\"\",\r\n            \"dbResponse\":\"\",\r\n            \"fields\":\"\"\r\n        };\r\n        var query = req.body.query;\r\n        console.log(\"query is \"+query);\r\n        database.connection.query(query, function(err, rows) {\r\n            if (!err) {\r\n                console.log(\"query executed successfully successfully \"+JSON.stringify(rows));\r\n                appData.error = 0;\r\n                appData[\"status\"] = \"success!\";\r\n                appData[\"dbResponse\"] = rows;\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"Query Exception \"+err);\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    registerUser= (req, res) =>{\r\n        var today = new Date();\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        /*var userData = {\r\n            \"id\": req.body.id,\r\n            \"first_name\": req.body.first_name,\r\n            \"last_name\": req.body.last_name,\r\n            \"email\": req.body.email,\r\n            \"password\": req.body.password,\r\n            \"phoneNumber\": req.body.phoneNumber\r\n        } */\r\n        var userData =[req.body.email, req.body.first_name, req.body.last_name, req.body.password, req.body.phoneNumber]\r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('INSERT INTO users SET ?', userData, function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData.error = 0;\r\n                        appData[\"data\"] = \"User registered successfully!\";\r\n                        res.status(201).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(err);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        });*/\r\n        database.connection.query('insert into users(email,first_name,last_name,password, phonenumber) values ($1, $2, $3, $4, $5)', userData, function(err, rows, fields) {\r\n            if (!err) {\r\n                console.log(\"query is working fine \"+rows);\r\n                appData.error = 0;\r\n                appData[\"data\"] = \"User registered successfully!\";\r\n                res.status(201).json(appData);\r\n            } else {\r\n                console.log(\"got error \"+err)\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                res.status(400).json(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    loginUser = (req, res) => {\r\n        var appData = {\r\n            \"error\": 1,\r\n            \"data\": \"\"\r\n        };\r\n        var email = req.body.email;\r\n        var password = req.body.password;\r\n    \r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT * FROM users WHERE email = ?', [email], function(err, rows, fields) {\r\n                    if (err) {\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Error Occured!\";\r\n                        res.status(400).json(appData);\r\n                    } else {\r\n                        if (rows.length > 0) {\r\n                            if (rows[0].password == password) {\r\n                                console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                                let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                                    expiresIn: 1440\r\n                                });\r\n                                appData.error = 0;\r\n                                appData[\"token\"] = token;\r\n                                res.status(200).json(appData);\r\n                            } else {\r\n                                appData.error = 1;\r\n                                appData[\"data\"] = \"Email and Password does not match\";\r\n                                res.status(204).json(appData);\r\n                            }\r\n                        } else {\r\n                            appData.error = 1;\r\n                            appData[\"data\"] = \"Email does not exists!\";\r\n                            res.status(204).json(appData);\r\n                        }\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        }); */\r\n        console.log(\"data is \"+JSON.stringify(req.body));\r\n        database.connection.query('SELECT * FROM users WHERE email = $1', [email], function(err, dbResponse, fields) {\r\n            if (err) {\r\n                console.log(\"error is \");\r\n                console.log(err);\r\n                appData.error = 1;\r\n                appData[\"data\"] = \"Error Occured!\";\r\n                appData[\"error\"] = err;\r\n                res.status(400).json(appData);\r\n            } else {\r\n                console.log(\"no error is \");\r\n                let rows = dbResponse.rows;\r\n                console.log(rows);\r\n                if (rows.length > 0) {\r\n                    console.log(\"rows.length is \");\r\n                    if (rows[0].password == password) {\r\n                        console.log(\"password match \");\r\n                        console.log(\"rows[0] \"+JSON.stringify(rows[0]));\r\n                        let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\r\n                            expiresIn: 1440\r\n                        });\r\n                        appData.error = 0;\r\n                        appData[\"token\"] = token;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        console.log(\"password not match \");\r\n                        appData.error = 1;\r\n                        appData[\"data\"] = \"Email and Password does not match\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                } else {\r\n                    console.log(\"else \");\r\n                    appData.error = 1;\r\n                    appData[\"data\"] = \"Email does not exists!\";\r\n                    res.status(204).json(appData);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    getUser = (req, res) =>{\r\n        var appData = {};\r\n\r\n        /*database.connection.getConnection(function(err, connection) {\r\n            if (err) {\r\n                appData[\"error\"] = 1;\r\n                appData[\"data\"] = \"Internal Server Error\";\r\n                res.status(500).json(appData);\r\n            } else {\r\n                connection.query('SELECT *FROM users', function(err, rows, fields) {\r\n                    if (!err) {\r\n                        appData[\"error\"] = 0;\r\n                        appData[\"data\"] = rows;\r\n                        res.status(200).json(appData);\r\n                    } else {\r\n                        appData[\"data\"] = \"No data found\";\r\n                        res.status(204).json(appData);\r\n                    }\r\n                });\r\n                connection.release();\r\n            }\r\n        }); */\r\n        database.connection.query('SELECT * FROM users', function(err, dbResponse, fields) {\r\n            if (!err) {\r\n                let rows = dbResponse.rows;\r\n                appData[\"error\"] = 0;\r\n                appData[\"data\"] = rows;\r\n                res.status(200).json(appData);\r\n            } else {\r\n                appData[\"data\"] = \"No data found\";\r\n                res.status(204).json(appData);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default SocietyController;"]}