{"version":3,"sources":["../../../../server/modules/society/controllers/societyController.js"],"names":["process","env","SECRET_KEY","SocietyController","registerOwner","req","res","societyModel","then","dbResponse","status","satusCode","json","catch","err","console","log","getDetails","getDetailsUsingQueryParam","updatePendingPaymentOfFlat","updatePaymentHistory","reqBody","callback","currentDate","Date","registerBuilding","body","buildingName","societyid","registerSociety","societyName","address","pincode","getOwnerList","societyIds","buildingNames","flatIds","registerFlat","flatName","societyId","deleteRow","tableName","columnName","columnValue","updateBuilding","updateSociety","updateFlat","updateOwner","getDetailsUsingMultiParam","callStoredProc","insertOrUpdatePaymentStructure","totalAmount","buildingMaintenance","parkingMaintenance","municipalDue","sinkingFund","electricityCharge","getFlatIdsByOwnerId","updatedBy","idsArray","response","method","deleteCurrentRecieptIds","id","recieptArray","createPaymentRecieptArray","insertRecieptArray","paymentStructureId","insertId","ownerId","ids","innerArray","forEach","element","push","flatid","SocietyModel","blockChain","BlockChain"],"mappings":"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","file":"societyController.js","sourcesContent":["import SocietyModel from './../models/societyModel';\nimport BlockChain from './../../blockchain/blockchain'\nimport Block from '../../blockchain/block';\nprocess.env.SECRET_KEY = 'varunv';\n\nclass SocietyController {\n    constructor(){\n         this.societyModel = new SocietyModel();\n         this.blockChain = new BlockChain();\n    }\n\n    \n    registerOwner= (req, res) =>{\n        this.societyModel.registerOwner(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of registerOwner ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n    getDetails= (req, res) =>{\n        //console.log('checking auto deploye1111');\n        this.societyModel.getDetails(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of getDetails',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n\n    // getDetails= (req, res) =>{\n    //     console.log('checking auto deploye1111');\n    //     this.societyModel.getDetails(req).then((dbResponse)=>{\n    //         if(req.params.tableName == 'flat'){\n    //             console.log('*****Inside flat table*******');\n    //             dbResponse.dbResponse.forEach((element,i) => {\n    //                 this.blockChain.addBlock(new Block(i,'12/2/2029',element));\n    //                 console.log('wait dude new block is in progress....');\n    //             });\n                \n    //             console.log('is valid',this.blockChain.isChainValid());\n    //             this.blockChain.chain[3].data = 'temprored';\n    //             console.log('is valid',this.blockChain.isChainValid());\n    //             res.status(dbResponse.satusCode).json(this.blockChain);\n    //         }\n    //       //  res.status(dbResponse.satusCode).json(dbResponse);\n    //     }).catch((err)=>{\n    //         console.log('catch block of getDetails',err);\n    //         res.status(err.satusCode).json(err);\n    //     });\n    // }\n    getDetailsUsingQueryParam= (req, res) =>{\n        //console.log(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`);\n        this.societyModel.getDetailsUsingQueryParam(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of getDetailsUsingQueryParam',err);\n            res.status(err.satusCode).json(err);\n        }); \n    }\n    updatePendingPaymentOfFlat= (req, res) =>{\n        //console.log(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`);\n        this.societyModel.updatePendingPaymentOfFlat(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n            // console.log('updatePendingPaymentOfFlat successfully done!!');\n            // this.updatePaymentHistory(req, (resFlag, responseData)=>{\n            //     if(resFlag){\n                    //res.status(dbResponse.satusCode).json(responseData);\n                // } else {\n                    \n                //     res.status(400).json(responseData);\n                // }\n            //});\n        }).catch((err)=>{\n            console.log('catch block of updatePendingPaymentOfFlat',err);\n            res.status(err.satusCode).json(err);\n        }); \n    }\n\n    updatePaymentHistory= (reqBody,callback) =>{\n        const currentDate = new Date();\n        //console.log(`update paymentHistory set paymentHistory = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`)\n        //console.log(`insert into paymenthistory(flatid,paid,ownerid) values (${reqBody.body.flatid},${reqBody.body.pendingPayment},${reqBody.body.ownerid});`);\n        this.societyModel.updatePaymentHistory(reqBody).then((dbResponse)=>{\n            callback(true, dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of updatePaymentHistory',err);\n            callback(false, err);\n        }); \n    }\n\n    registerBuilding = (req, res) => {\n        console.log(`insert into building(buildingname, societyid) values\n        (${req.body.buildingName},'${req.body.societyid}');`);\n        this.societyModel.registerBuilding(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of registerBuilding ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    registerSociety = (req, res) => {\n        console.log(`society register query is--- \n        insert into society(societyName, address, pincode) values \n        ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}'`);\n        this.societyModel.registerSociety(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of registerSociety ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    getOwnerList = (req, res) => {\n        console.log(`call get_owner_details(${req.body.societyIds}, ${req.body.buildingNames}, ${req.body.flatIds})`);\n        this.societyModel.getOwnerList(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of getOwnerList ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    registerFlat = (req, res) => {\n        console.log(`insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`);\n        this.societyModel.registerFlat(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of registerFlat ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n    deleteRow = (req, res) => {\n        console.log(`delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`);\n        this.societyModel.deleteRow(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of registerOwner ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    updateBuilding = (req, res) => {\n        console.log(`insert into building(buildingname, societyid) values\n        (${req.body.buildingName},'${req.body.societyid}');`);\n        this.societyModel.updateBuilding(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of updateBuilding ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    updateSociety = (req, res) => {\n        console.log(`society register query is--- \n        insert into society(societyName, address, pincode) values \n        ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}'`);\n        this.societyModel.updateSociety(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of updateSociety ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n    updateFlat = (req, res) => {\n        console.log(`insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`);\n        // this.societyModel.updateFlat(req).then((dbResponse)=>{\n        //     res.status(dbResponse.satusCode).json(dbResponse);\n        // }).catch((err)=>{\n        //     console.log('catch block of updateFlat ',err);\n        //     res.status(err.satusCode).json(err);\n        // });\n        res.status(200).json({dbResponse:'need to implement functionality'});\n    }\n\n    updateOwner= (req, res) =>{\n        this.societyModel.updateOwner(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of updateOwner ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    getDetailsUsingMultiParam= (req, res) =>{\n        this.societyModel.getDetailsUsingMultiParam(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of updateOwner ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    callStoredProc = (req, res)=>{\n        this.societyModel.callStoredProc(req).then((dbResponse)=>{\n            res.status(dbResponse.satusCode).json(dbResponse);\n        }).catch((err)=>{\n            console.log('catch block of callStoredProc ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    insertOrUpdatePaymentStructure = async (req, res)=>{\n        this.societyModel.insertOrUpdatePaymentStructure(req).then( async (dbResponse)=>{\n            let body = req.body;\n            let totalAmount = (body.buildingMaintenance||0)+(body.parkingMaintenance||0)+(body.municipalDue||0)+(body.sinkingFund||0)+(body.electricityCharge||0);\n\n            const idsArray = await this.getFlatIdsByOwnerId(req.body.updatedBy);\n            \n            let response ;\n            if(req.method=='PUT'){\n                response = await this.deleteCurrentRecieptIds(body.id);\n                const recieptArray = this.createPaymentRecieptArray(idsArray, totalAmount, body.id);\n                response = await this.insertRecieptArray(recieptArray);\n            } else {\n                let paymentStructureId = dbResponse.dbResponse.insertId;\n                const recieptArray = this.createPaymentRecieptArray(idsArray, totalAmount, paymentStructureId);\n                response = await this.insertRecieptArray(recieptArray);\n            }\n            res.status(dbResponse.satusCode).json(response);\n        }).catch((err)=>{\n            console.log('catch block of insertOrUpdatePaymentStructure ',err);\n            res.status(err.satusCode).json(err);\n        });\n    }\n\n    getFlatIdsByOwnerId = async (ownerId) =>{\n        try {\n            let ids= await  this.societyModel.getFlatIdsByOwnerId(ownerId);\n            return ids;\n        } catch(err){\n            console.log('catch block of getFlatIdsByOwnerId',err);\n            return err;\n        }\n    }\n\n    deleteCurrentRecieptIds = async (paymentStructureId) =>{\n        try {\n            let ids= await  this.societyModel.deleteCurrentRecieptIds(paymentStructureId);\n            return ids;\n        } catch(err){\n            console.log('catch block of deleteCurrentRecieptIds',err);\n            return err;\n        }\n    }\n\n    insertRecieptArray = async (recieptArray) =>{\n        try {\n            let response = await this.societyModel.insertRecieptArray(recieptArray);\n            response.dbResponse= 'payment Reciept inserted successfully!!';\n            return response;\n        } catch(err){\n            console.log('catch block of insertRecieptArray',err);\n        }\n    }\n\n    createPaymentRecieptArray = (ids, totalAmount, paymentStructureId) =>{\n        let recieptArray = [];\n        let innerArray;\n        ids.dbResponse.forEach((element)=>{\n            innerArray=[];\n            innerArray.push(element.flatid);\n            innerArray.push(totalAmount);\n            innerArray.push(paymentStructureId);\n            recieptArray.push(innerArray);\n        });\n        return recieptArray;\n    }\n\n}\n\nexport default SocietyController;"]}