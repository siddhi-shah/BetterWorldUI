{"version":3,"sources":["../../../../server/modules/society/controllers/societyController.js"],"names":["process","env","SECRET_KEY","SocietyController","registerOwner","req","res","societyModel","then","dbResponse","status","satusCode","json","catch","err","console","log","getDetails","getDetailsUsingQueryParam","params","tableName","columnName","query","value","updatePendingPaymentOfFlat","body","pendingPayment","ownerid","flatid","updatePaymentHistory","resFlag","responseData","reqBody","callback","currentDate","Date","toISOString","registerBuilding","buildingName","societyid","registerSociety","societyName","address","pincode","getOwnerList","societyIds","buildingNames","flatIds","registerFlat","flatName","societyId","ownerId","SocietyModel"],"mappings":"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","file":"societyController.js","sourcesContent":["import SocietyModel from './../models/societyModel';\r\nprocess.env.SECRET_KEY = 'varunv';\r\n\r\nclass SocietyController {\r\n    constructor(){\r\n         this.societyModel = new SocietyModel();\r\n    }\r\n\r\n    registerOwner= (req, res) =>{\r\n        this.societyModel.registerOwner(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    getDetails= (req, res) =>{\r\n        console.log('checking auto deploye1111');\r\n        this.societyModel.getDetails(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getDetails',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n    getDetailsUsingQueryParam= (req, res) =>{\r\n        console.log(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`);\r\n        this.societyModel.getDetailsUsingQueryParam(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getDetailsUsingQueryParam',err);\r\n            res.status(err.satusCode).json(err);\r\n        }); \r\n    }\r\n    updatePendingPaymentOfFlat= (req, res) =>{\r\n        console.log(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`);\r\n        this.societyModel.updatePendingPaymentOfFlat(req).then((dbResponse)=>{\r\n            console.log('updatePendingPaymentOfFlat successfully done!!');\r\n            this.updatePaymentHistory(req, (resFlag, responseData)=>{\r\n                if(resFlag){\r\n                    res.status(dbResponse.satusCode).json(responseData);\r\n                } else {\r\n                    \r\n                    res.status(400).json(responseData);\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            console.log('catch block of updatePendingPaymentOfFlat',err);\r\n            res.status(err.satusCode).json(err);\r\n        }); \r\n    }\r\n\r\n    updatePaymentHistory= (reqBody,callback) =>{\r\n        const currentDate = new Date();\r\n        //console.log(`update paymentHistory set paymentHistory = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid};`)\r\n        console.log(`insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${reqBody.body.flatid},${reqBody.body.pendingPayment},'${currentDate.toISOString()}','${currentDate.toISOString()}',${reqBody.body.ownerid});`);\r\n        this.societyModel.updatePaymentHistory(reqBody).then((dbResponse)=>{\r\n            callback(true, dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of updatePaymentHistory',err);\r\n            callback(false, err);\r\n        }); \r\n    }\r\n\r\n    registerBuilding = (req, res) => {\r\n        console.log(`insert into building(buildingname, societyid) values\r\n        (${req.body.buildingName},'${req.body.societyid}');`);\r\n        this.societyModel.registerBuilding(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    registerSociety = (req, res) => {\r\n        console.log(`society register query is--- \r\n        insert into society(societyName, address, pincode) values \r\n        ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}'`);\r\n        this.societyModel.registerSociety(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    getOwnerList = (req, res) => {\r\n        console.log(`call get_owner_details(${req.body.societyIds}, ${req.body.buildingNames}, ${req.body.flatIds})`);\r\n        this.societyModel.getOwnerList(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of getOwnerList ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n\r\n    registerFlat = (req, res) => {\r\n        console.log(`insert into flat(flatname, buildingname, societyid, ownerid) \r\n        values (${req.body.flatName}, ${req.body.buildingName}, ${req.body.societyId},\r\n             ${req.body.ownerId});`);\r\n        this.societyModel.registerFlat(req).then((dbResponse)=>{\r\n            res.status(dbResponse.satusCode).json(dbResponse);\r\n        }).catch((err)=>{\r\n            console.log('catch block of registerOwner ',err);\r\n            res.status(err.satusCode).json(err);\r\n        });\r\n    }\r\n}\r\n\r\nexport default SocietyController;"]}