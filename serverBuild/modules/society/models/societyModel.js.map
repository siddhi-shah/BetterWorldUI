{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["process","env","SECRET_KEY","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","query","queryMediator","queryConnection","then","result","console","log","catch","err","callStoredProc","body","storedProc","getOwnerList","societyIds","length","buildingNames","flatIds","updateFlat","updateValue","registerOwner","flatData","societyId","buildingName","flatNumber","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","isAdmin","age","gender","password","fetchOwnerResponse","dbResponse","ownerid","insertMappingResponse","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","flatid","pendingPayment","updatePaymentHistory","currentDate","Date","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","flatName","updateBuilding","updateSociety","updateOwner","getDetailsUsingMultiParam","columnName1","value1","columnName2","value2","deleteRow","columnValue","QueryMediator"],"mappings":"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","file":"societyModel.js","sourcesContent":["process.env.SECRET_KEY = 'varunv';\r\nimport QueryMediator from '../models/queryConnection';\r\n\r\n\r\n\r\nclass SocietyModel {\r\n\r\n    constructor() {\r\n        this.queryMediator = new QueryMediator();\r\n    }\r\n\r\n    \r\n    getOwner = (req, searchData) => new Promise((resolve, reject) => {\r\n        let query = `select ownerid from owner where phonenumber = ${searchData[0]} and email = \\'${searchData[1]}\\' `;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('getOwner : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    callStoredProc = (req) => new Promise((resolve, reject) => {\r\n        let query = `call ${req.body.storedProc}`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('callStoredProc : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    getOwnerList = (req) => new Promise((resolve, reject) => {\r\n        var societyIds = (req.body.societyIds && req.body.societyIds.length > 0) ? `'${req.body.societyIds}'` : null;\r\n        var buildingNames = (req.body.buildingNames && req.body.buildingNames.length > 0) ? `'${req.body.buildingNames}'` : null;\r\n        var flatIds = (req.body.flatIds && req.body.flatIds.length > 0) ? `'${req.body.flatIds}'` : null;\r\n\r\n        let query = `call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`;\r\n        console.log(`call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`);\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('getOwnerList : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject) => {\r\n        console.log('searchData is ', searchData);\r\n        console.log('update value is ', updateValue);\r\n\r\n        let query = `update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and flatname = '${searchData[2]}'`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('updateFlat : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            console.log(`query is ------------ update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = ${searchData[1]} and flatname = ${searchData[2]}`);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    registerOwner = (req) =>  new Promise(async (resolve, reject) => {\r\n        var flatData = [req.body.societyId, req.body.buildingName, req.body.flatNumber];\r\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\r\n        var ownerInsertData = [[req.body.ownerName, req.body.isAdmin, req.body.phoneNumber, req.body.email, req.body.age, req.body.gender, req.body.password]];\r\n\r\n        let query = 'insert into owner(ownername,isadmin,phonenumber,email, age, gender, password) values ?';\r\n        try {\r\n            await this.queryMediator.queryConnection(query, ownerInsertData);\r\n            let fetchOwnerResponse = await this.getOwner(null, ownerSearchData);\r\n            if(fetchOwnerResponse.dbResponse && fetchOwnerResponse.dbResponse[0] && fetchOwnerResponse.dbResponse[0].ownerid) {\r\n                let insertMappingResponse = await this.updateFlat(null, flatData, fetchOwnerResponse.dbResponse[0].ownerid);\r\n                fetchOwnerResponse.dbResponse = 'new owner record inserted and updated flat sucessfully';\r\n                resolve(insertMappingResponse);\r\n            } else {\r\n                fetchOwnerResponse.dbResponse = 'new owner record inserted sucessfully';\r\n                resolve(fetchOwnerResponse);\r\n            }\r\n        } catch (err) {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n            //return err;\r\n        }\r\n    })\r\n\r\n    getDetails = (req) => new Promise((resolve, reject) => {\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        let query = `select * from ${req.params.tableName}`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('getDetails : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject) => {\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        let query = `select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('select query working fine : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    // updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject) => {\r\n    //     console.log('req.params.tableName', req.params.tableName);\r\n\r\n    //     let query = `update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}`;\r\n    //     this.queryMediator.queryConnection(query).then((result) => {\r\n    //         console.log('pending payment successfully updated : Ok ');\r\n    //         resolve(result);\r\n    //     }).catch((err) => {\r\n    //         console.log('got query error ', err);\r\n    //         reject(err);\r\n    //     });\r\n    // })\r\n\r\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject) => {\r\n        //console.log('req.params.tableName', req.params.tableName);\r\n\r\n        //let query = `update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}`;\r\n        let query = `call update_pending_payment(${req.body.flatid}, ${req.body.pendingPayment}, ${req.body.ownerid})`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('pending payment successfully updated : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    })\r\n\r\n    updatePaymentHistory = (req) => new Promise((resolve, reject) => {\r\n        const currentDate = new Date();\r\n\r\n        let query = `insert into paymenthistory(flatid,paid,ownerid) values (${req.body.flatid},${req.body.pendingPayment},${req.body.ownerid});`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('pending payment history successfully updated : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    registerBuilding = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Building is successfully Inserted: Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    registerSociety = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Society is successfully Inserted : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    registerFlat = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Flat is successfully Inserted : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    updateBuilding = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Building is successfully Updated: Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    updateSociety = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Society is successfully Updated : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    // updateFlat = (req) => new Promise((resolve, reject) => {\r\n    //     let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\r\n    //     this.queryMediator.queryConnection(query).then((result) => {\r\n    //         console.log('Flat is successfully Updated : Ok ');\r\n    //         resolve(result);\r\n    //     }).catch((err) => {\r\n    //         console.log('got query error ', err);\r\n    //         reject(err);\r\n    //     });\r\n    // });\r\n\r\n    updateOwner = (req) => new Promise((resolve, reject) => {\r\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('Flat is successfully Updated : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    getDetailsUsingMultiParam = (req) => new Promise((resolve, reject) => {\r\n        let query = `select * from ${req.params.tableName} where ${req.params.columnName1} = ${req.query.value1} and ${req.params.columnName2} = ${req.query.value2}`;\r\n        console.log(query);\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('getDetailsUsingMultiParam : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n    deleteRow = (req) => new Promise((resolve, reject) => {\r\n        let query = `delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`;\r\n        this.queryMediator.queryConnection(query).then((result) => {\r\n            console.log('delete successfully : Ok ');\r\n            resolve(result);\r\n        }).catch((err) => {\r\n            console.log('got query error while deleting ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nexport default SocietyModel;"]}