{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["database","require","process","env","SECRET_KEY","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","appData","connection","getConnection","err","query","rows","release","console","log","error","updateFlat","updateValue","registerOwner","flatData","body","societyId","buildingName","flatNumber","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","isAdmin","age","gender","password","then","response","JSON","stringify","dbResponse","ownerid","catch","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","pendingPayment","flatid","updatePaymentHistory","currentDate","Date","toISOString","replace","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","flatName","ownerId"],"mappings":"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","file":"societyModel.js","sourcesContent":["var database = require('./../../../../database/database');\nprocess.env.SECRET_KEY = 'varunv';\n\nclass SocietyModel {\n\n    getOwner = (req, searchData) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        database.connection.getConnection((err, connection)=> {\n            connection.query('select ownerid from owner where phonenumber = ? and email = ? ', searchData ,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('select owner query working fine '+rows);\n                    appData.error = 0;\n                    appData['data'] = 'User registered successfully!';\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['data'] = 'Error Occured!';\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        console.log('searchData is ',searchData);\n        console.log('update value is ', updateValue);\n        try {\n\n            database.connection.getConnection((err, connection)=> {\n                connection.query(`update flat set ownerid = ${updateValue} where \n        societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and \n        flatname = '${searchData[2]}'` ,function(err, rows) {\n            connection.release();\n            //console.log(temp.sql);\n            if (!err) {\n                console.log('select owner query working fine '+rows);\n                appData.error = 0;\n                appData['data'] = 'User registered successfully!';\n                appData['dbResponse'] = rows;\n                appData['satusCode'] = 201;\n                resolve(appData);\n                //res.status(201).json(appData);\n            } else {\n                console.log('got error '+err);\n                console.log(`query is ------------ update flat set ownerid = ${updateValue} where \n                societyid = ${searchData[0]} and buildingname = ${searchData[1]} and \n                flatname = ${searchData[2]}`);\n                appData['data'] = 'Error Occured!';\n                appData['satusCode'] = 400;\n                appData.error = err;\n                reject(appData);\n                //res.status(400).json(err);\n            }\n        });\n            });\n        \n        } catch(error){\n            console.log('got error------',error);\n            reject(error);\n\n        }\n    })\n\n\n    registerOwner = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        var flatData = [req.body.societyId,req.body.buildingName, req.body.flatNumber];\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\n        var ownerInsertData =[req.body.ownerName, req.body.isAdmin, req.body.phoneNumber, \n            req.body.email, req.body.age, req.body.gender, req.body.password\n            ];\n            database.connection.getConnection((err, connection) => {\n                connection.query('insert into owner(ownername,isadmin,phonenumber,email, age, gender, password) values (?,?,?,?,?,?,?)', ownerInsertData, (err) => {\n                    //console.log(temp.sql);\n                    connection.release();\n                    if (!err) {\n        \n                        this.getOwner(null, ownerSearchData).then((response)=>{\n                            console.log('select owner query is working fine '+JSON.stringify(response));\n                            console.log('dbResponse.rows is ',JSON.stringify(response.dbResponse.rows));\n                            console.log('dbResponse.rows[0] is ',JSON.stringify(response.dbResponse));\n                            console.log('dbResponse.rows[0].ownerid is ',JSON.stringify(response.dbResponse[0].ownerid));\n        \n                            appData.error = 0;\n                            //appData[\"data\"] = \"Owner id is \"+dbResponse.rows[0].ownerid;\n                            appData['ownerid'] = response.dbResponse[0].ownerid;\n                            appData['satusCode'] = 201;                      \n                            //resolve(appData);\n                            return appData;\n                           // res.status(dbResponse.satusCode).json(dbResponse);\n                        }).then((appData)=>{\n                            resolve(this.updateFlat(null, flatData, appData.ownerid));\n                        }).catch((err)=>{\n                            console.log('got error '+err);\n                            appData['data'] = 'Error Occured!';\n                            appData['satusCode'] = 400;\n                            appData.error = err;\n                            reject(appData);\n                           // res.status(err.satusCode).json(err);\n                        });\n                        //res.status(201).json(appData);\n                    } else {\n                        console.log('got error '+err);\n                        appData['data'] = 'Error Occured!';\n                        appData['satusCode'] = 400;\n                        appData.error = err;\n                        reject(appData);\n                        //res.status(400).json(err);\n                    }\n                });\n            });\n        \n    })\n\n    getDetails = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n\n        console.log('req.params.tableName', req.params.tableName);\n        database.connection.getConnection((err, connection) => {\n            if(err){\n                console.log('got error '+err);\n                appData['satusCode'] = 500;\n                appData.error = err;\n                reject(appData);\n            } else {\n            connection.query(`select * from ${req.params.tableName}` ,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('select query working fine '+rows);\n                    appData.error = 0;\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        }\n        });\n        \n    })\n\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n\n        console.log('req.params.tableName', req.params.tableName);\n        database.connection.getConnection((err, connection)=> {\n            connection.query(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}` ,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('select query working fine '+rows);\n                    appData.error = 0;\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n\n        console.log('req.params.tableName', req.params.tableName);\n        database.connection.getConnection((err, connection) =>{\n            connection.query(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}` ,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    \n                        console.log('pending payment successfully updated '+rows);\n                        appData.error = 0;\n                        appData['dbResponse'] = rows;\n                        appData['satusCode'] = 201;\n                        resolve(appData);\n                    \n\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n\n    updatePaymentHistory = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        const currentDate = new Date();\n        database.connection.getConnection((err, connection) => {\n            connection.query(`insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${req.body.flatid},${req.body.pendingPayment},'${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }','${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }',${req.body.ownerid});`,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('pending payment history successfully updated '+rows);\n                    appData.error = 0;\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n    registerBuilding = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        database.connection.getConnection((err, connection)=> {\n            connection.query(`insert into building(buildingname, societyid) values\n         ('${req.body.buildingName}',${req.body.societyid});`,function(err, rows) {\n            //console.log(temp.sql);\n            connection.release();\n            if (!err) {\n                console.log('pending payment history successfully updated '+rows);\n                appData.error = 0;\n                appData['dbResponse'] = rows;\n                appData['satusCode'] = 201;\n                resolve(appData);\n                //res.status(201).json(appData);\n            } else {\n                console.log('got error '+err);\n                appData['satusCode'] = 400;\n                appData.error = err;\n                reject(appData);\n                //res.status(400).json(err);\n            }\n        });\n        });\n        \n    })\n\n    registerSociety = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        database.connection.getConnection((err, connection) =>{\n            connection.query(`insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('Society is successfully Inserted'+rows);\n                    appData.error = 0;\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n\n    registerFlat = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        database.connection.getConnection((err, connection) =>{\n            connection.query(`insert into flat(flatname, buildingname, societyid, ownerid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId}, ${req.body.ownerId});`,function(err, rows) {\n                //console.log(temp.sql);\n                connection.release();\n                if (!err) {\n                    console.log('flat is successfully Inserted'+rows);\n                    appData.error = 0;\n                    appData['dbResponse'] = rows;\n                    appData['satusCode'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    reject(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n}\n\nexport default SocietyModel;"]}