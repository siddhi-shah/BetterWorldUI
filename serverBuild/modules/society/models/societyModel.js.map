{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["process","env","SECRET_KEY","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","query","queryMediator","queryConnection","then","result","console","log","catch","err","callStoredProc","body","storedProc","getOwnerList","societyIds","length","buildingNames","flatIds","updateFlat","updateValue","registerOwner","flatData","societyId","buildingName","flatName","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","type","age","gender","password","fetchOwnerResponse","dbResponse","ownerid","insertMappingResponse","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","flatid","pendingPayment","updatePaymentHistory","currentDate","Date","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","updateBuilding","updateSociety","updateOwner","getDetailsUsingMultiParam","columnName1","value1","columnName2","value2","deleteRow","columnValue","IsCurrentMonthPaymentStructureExist","recordCount","count","error","insertOrUpdatePaymentStructure","valuesArray","method","buildingMaintenance","parkingMaintenance","municipalDue","sinkingFund","electricityCharge","updatedBy","id","insertRecieptArray","recieptArray","getFlatIdsByOwnerId","ownerId","deleteCurrentRecieptIds","paymentStructureId","getCurrentReciepts","recieptIdsArray","deleteResponse","idsArray","forEach","element","push","QueryMediator"],"mappings":"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","file":"societyModel.js","sourcesContent":["process.env.SECRET_KEY = 'varunv';\nimport QueryMediator from '../models/queryConnection';\n\n\n\nclass SocietyModel {\n\n    constructor() {\n        this.queryMediator = new QueryMediator();\n    }\n\n    \n    getOwner = (req, searchData) => new Promise((resolve, reject) => {\n        let query = `select ownerid from owner where phonenumber = ${searchData[0]} and email = \\'${searchData[1]}\\' `;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getOwner : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    callStoredProc = (req) => new Promise((resolve, reject) => {\n        let query = `call ${req.body.storedProc}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('callStoredProc : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    getOwnerList = (req) => new Promise((resolve, reject) => {\n        var societyIds = (req.body.societyIds && req.body.societyIds.length > 0) ? `'${req.body.societyIds}'` : null;\n        var buildingNames = (req.body.buildingNames && req.body.buildingNames.length > 0) ? `'${req.body.buildingNames}'` : null;\n        var flatIds = (req.body.flatIds && req.body.flatIds.length > 0) ? `'${req.body.flatIds}'` : null;\n\n        let query = `call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`;\n        console.log(`call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`);\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getOwnerList : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject) => {\n        console.log('searchData is ', searchData);\n        console.log('update value is ', updateValue);\n\n        let query = `update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and flatname = '${searchData[2]}'`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('updateFlat : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            console.log(`query is ------------ update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = ${searchData[1]} and flatname = ${searchData[2]}`);\n            reject(err);\n        });\n    })\n\n    registerOwner = (req) =>  new Promise(async (resolve, reject) => {\n        var flatData = [req.body.societyId, req.body.buildingName, req.body.flatName];\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\n        var ownerInsertData = [[req.body.ownerName, req.body.type, req.body.phoneNumber, req.body.email, req.body.age, req.body.gender, req.body.password]];\n\n        let query = 'insert into owner(ownername,type,phonenumber,email, age, gender, password) values ?';\n        try {\n            await this.queryMediator.queryConnection(query, ownerInsertData);\n            let fetchOwnerResponse = await this.getOwner(null, ownerSearchData);\n            if(fetchOwnerResponse.dbResponse && fetchOwnerResponse.dbResponse[0] && fetchOwnerResponse.dbResponse[0].ownerid) {\n                let insertMappingResponse = await this.updateFlat(null, flatData, fetchOwnerResponse.dbResponse[0].ownerid);\n                fetchOwnerResponse.dbResponse = 'new owner record inserted and updated flat sucessfully';\n                resolve(insertMappingResponse);\n            } else {\n                fetchOwnerResponse.dbResponse = 'new owner record inserted sucessfully';\n                resolve(fetchOwnerResponse);\n            }\n        } catch (err) {\n            console.log('got query error ', err);\n            reject(err);\n            //return err;\n        }\n    })\n\n    getDetails = (req) => new Promise((resolve, reject) => {\n        console.log('req.params.tableName', req.params.tableName);\n        let query = `select * from ${req.params.tableName}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getDetails : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject) => {\n        console.log('req.params.tableName', req.params.tableName);\n        let query = `select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('select query working fine : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    // updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject) => {\n    //     console.log('req.params.tableName', req.params.tableName);\n\n    //     let query = `update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}`;\n    //     this.queryMediator.queryConnection(query).then((result) => {\n    //         console.log('pending payment successfully updated : Ok ');\n    //         resolve(result);\n    //     }).catch((err) => {\n    //         console.log('got query error ', err);\n    //         reject(err);\n    //     });\n    // })\n\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject) => {\n        //console.log('req.params.tableName', req.params.tableName);\n\n        //let query = `update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}`;\n        let query = `call update_pending_payment(${req.body.flatid}, ${req.body.pendingPayment}, ${req.body.ownerid})`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('pending payment successfully updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    updatePaymentHistory = (req) => new Promise((resolve, reject) => {\n        const currentDate = new Date();\n\n        let query = `insert into paymenthistory(flatid,paid,ownerid) values (${req.body.flatid},${req.body.pendingPayment},${req.body.ownerid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('pending payment history successfully updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerBuilding = (req) => new Promise((resolve, reject) => {\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Building is successfully Inserted: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerSociety = (req) => new Promise((resolve, reject) => {\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Society is successfully Inserted : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerFlat = (req) => new Promise((resolve, reject) => {\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Flat is successfully Inserted : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateBuilding = (req) => new Promise((resolve, reject) => {\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Building is successfully Updated: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateSociety = (req) => new Promise((resolve, reject) => {\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Society is successfully Updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    // updateFlat = (req) => new Promise((resolve, reject) => {\n    //     let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n    //     this.queryMediator.queryConnection(query).then((result) => {\n    //         console.log('Flat is successfully Updated : Ok ');\n    //         resolve(result);\n    //     }).catch((err) => {\n    //         console.log('got query error ', err);\n    //         reject(err);\n    //     });\n    // });\n\n    updateOwner = (req) => new Promise((resolve, reject) => {\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Flat is successfully Updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    getDetailsUsingMultiParam = (req) => new Promise((resolve, reject) => {\n        let query = `select * from ${req.params.tableName} where ${req.params.columnName1} = ${req.query.value1} and ${req.params.columnName2} = ${req.query.value2}`;\n        console.log(query);\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getDetailsUsingMultiParam : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    deleteRow = (req) => new Promise((resolve, reject) => {\n        let query = `delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('delete successfully : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error while deleting ', err);\n            reject(err);\n        });\n    });\n\n    IsCurrentMonthPaymentStructureExist = async () => {\n        let query = `select count(id) as count from dev_society.paymentstructure  where MONTH(createdDate) = MONTH(CURRENT_DATE())\n        AND YEAR(createdDate) = YEAR(CURRENT_DATE());`;\n        try {\n            const recordCount = await this.queryMediator.queryConnection(query);\n            console.log('IsCurrentMonthPaymentStructureExist: Ok ', recordCount.dbResponse[0].count); \n            if(recordCount >0){\n                return true;\n            } else {\n                return false;\n            }\n        } catch(err){\n            console.error('IsCurrentMonthPaymentStructureExist : Error',err);\n            throw err;\n        }\n    }\n\n    insertOrUpdatePaymentStructure = (req) => new Promise((resolve, reject) => {\n        let body = req.body;\n        let query;\n        let valuesArray=null;\n        console.log(\"req.method---\",req.method);\n        if(req.method == 'POST'){\n            query = `insert into paymentstructure(buildingMaintenance, parkingMaintenance, municipalDue, sinkingFund, electricityCharge, updatedBy) values (${body.buildingMaintenance},${body.parkingMaintenance},${body.municipalDue},${body.sinkingFund},${body.electricityCharge},${body.updatedBy});`;\n        } else if(req.method == 'PUT'){\n            query = `update paymentstructure set buildingMaintenance =${body.buildingMaintenance}, parkingMaintenance=${body.parkingMaintenance}, municipalDue=${body.municipalDue}, sinkingFund=${body.sinkingFund}, electricityCharge=${body.electricityCharge}, updatedBy=${body.updatedBy} where id = ${body.id}`;\n            // valuesArray = [body.buildingMaintenance, body.parkingMaintenance, body.municipalDue, body.sinkingFund, body.electricityCharge, body.updatedBy, body.id];\n        }\n        this.queryMediator.queryConnection(query, valuesArray).then((result) => {\n            console.log('insertOrUpdatePaymentStructure: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('insertOrUpdatePaymentStructure : Error ', err);\n            reject(err);\n        });\n    });\n\n    insertRecieptArray = (recieptArray) => new Promise((resolve, reject) => {\n        let query = 'insert into paymentreceipt(flatid, monthlyamount, paymentStructureid) values ?';\n        this.queryMediator.queryConnection(query, recieptArray).then((result) => {\n            console.log('insertOrUpdateRecieptArray: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('insertOrUpdateRecieptArray : Error ', err);\n            reject(err);\n        });\n    });\n\n    getFlatIdsByOwnerId = (ownerId) => new Promise((resolve, reject) => {\n        let query = `SELECT flatid FROM flat where ownerid = ${ownerId}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('insertPaymentReceipt: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('insertPaymentReceipt : Error ', err);\n            reject(err);\n        });\n    });\n\n    deleteCurrentRecieptIds =async (paymentStructureId)=>{\n        const recieptIdsArray = await this.getCurrentReciepts(paymentStructureId);\n        const query = `DELETE FROM paymentreceipt WHERE id IN (${recieptIdsArray})`;\n        try {\n            const deleteResponse = await this.queryMediator.queryConnection(query);  \n            console.log('deleteCurrentRecieptIds: Ok ', deleteResponse);    \n            return deleteResponse;\n        } catch(err){\n            console.error('deleteCurrentRecieptIds : Error',err);\n            throw err;\n        }\n\n    }\n\n    getCurrentReciepts = async (paymentStructureId)=>{\n        let query = `SELECT id FROM paymentreceipt where paymentStructureid = ${paymentStructureId} and MONTH(createdDate) = MONTH(CURRENT_DATE())\n        AND YEAR(createdDate) = YEAR(CURRENT_DATE())`;\n        try {\n            const recieptIdsArray = await this.queryMediator.queryConnection(query);\n            console.log('getCurrentReciepts: Ok ', recieptIdsArray); \n            let idsArray = [];\n            recieptIdsArray.dbResponse.forEach((element)=>{\n                idsArray.push(element.id);\n            })\n            return idsArray;\n        } catch(err){\n            console.error('getCurrentReciepts : Error',err);\n            throw err;\n        }\n    }\n\n\n}\n\nexport default SocietyModel;"]}