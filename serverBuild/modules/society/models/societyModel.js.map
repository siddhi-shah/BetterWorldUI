{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["database","require","process","env","SECRET_KEY","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","appData","connection","getConnection","err","query","rows","release","console","log","error","getOwnerList","societyIds","body","length","buildingNames","flatIds","sql","updateFlat","updateValue","registerOwner","flatData","societyId","buildingName","flatNumber","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","isAdmin","age","gender","password","then","response","dbResponse","ownerid","catch","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","pendingPayment","flatid","updatePaymentHistory","currentDate","Date","toISOString","replace","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","flatName","ownerId","deleteRow","columnValue"],"mappings":"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","file":"societyModel.js","sourcesContent":["var database = require('./../../../../database/database');\r\nprocess.env.SECRET_KEY = 'varunv';\r\n\r\nclass SocietyModel {\r\n\r\n    getOwner = (req, searchData) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query('select ownerid from owner where phonenumber = ? and email = ? ', searchData ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('getOwner : Ok ');\r\n                    appData.error = 0;\r\n                    appData['data'] = 'User registered successfully!';\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['data'] = 'Error Occured!';\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    getOwnerList = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        var societyIds = (req.body.societyIds && req.body.societyIds.length>0) ? `'${req.body.societyIds}'`:null;\r\n        var buildingNames = (req.body.buildingNames && req.body.buildingNames.length>0)?`'${req.body.buildingNames}'`:null;\r\n        var flatIds =  (req.body.flatIds && req.body.flatIds.length>0)?`'${req.body.flatIds}'`:null;\r\n\r\n        database.connection.getConnection((err, connection)=> {\r\n           const query =  connection.query(`call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})` ,function(err, rows) {\r\n                console.log(query.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('getOwnerList : Ok ');\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['data'] = 'Error Occured!';\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        console.log('searchData is ',searchData);\r\n        console.log('update value is ', updateValue);\r\n        try {\r\n\r\n            database.connection.getConnection((err, connection)=> {\r\n                connection.query(`update flat set ownerid = ${updateValue} where \r\n        societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and \r\n        flatname = '${searchData[2]}'` ,function(err, rows) {\r\n            connection.release();\r\n            //console.log(temp.sql);\r\n            if (!err) {\r\n                console.log('updateFlat : Ok ');\r\n                appData.error = 0;\r\n                appData['data'] = 'User registered successfully!';\r\n                appData['dbResponse'] = rows;\r\n                appData['satusCode'] = 201;\r\n                resolve(appData);\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log('got error '+err);\r\n                console.log(`query is ------------ update flat set ownerid = ${updateValue} where \r\n                societyid = ${searchData[0]} and buildingname = ${searchData[1]} and \r\n                flatname = ${searchData[2]}`);\r\n                appData['data'] = 'Error Occured!';\r\n                appData['satusCode'] = 400;\r\n                appData.error = err;\r\n                reject(appData);\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n            });\r\n        \r\n        } catch(error){\r\n            console.log('got error------',error);\r\n            reject(error);\r\n\r\n        }\r\n    })\r\n\r\n\r\n    registerOwner = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        var flatData = [req.body.societyId,req.body.buildingName, req.body.flatNumber];\r\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\r\n        var ownerInsertData =[req.body.ownerName, req.body.isAdmin, req.body.phoneNumber, \r\n            req.body.email, req.body.age, req.body.gender, req.body.password\r\n            ];\r\n            database.connection.getConnection((err, connection) => {\r\n                connection.query('insert into owner(ownername,isadmin,phonenumber,email, age, gender, password) values (?,?,?,?,?,?,?)', ownerInsertData, (err) => {\r\n                    //console.log(temp.sql);\r\n                    connection.release();\r\n                    if (!err) {\r\n        \r\n                        this.getOwner(null, ownerSearchData).then((response)=>{\r\n                            console.log('this.getOwner : Ok ');\r\n\r\n        \r\n                            appData.error = 0;\r\n                            //appData[\"data\"] = \"Owner id is \"+dbResponse.rows[0].ownerid;\r\n                            appData['ownerid'] = response.dbResponse[0].ownerid;\r\n                            appData['satusCode'] = 201;                      \r\n                            //resolve(appData);\r\n                            return appData;\r\n                           // res.status(dbResponse.satusCode).json(dbResponse);\r\n                        }).then((appData)=>{\r\n                            resolve(this.updateFlat(null, flatData, appData.ownerid));\r\n                        }).catch((err)=>{\r\n                            console.log('got error '+err);\r\n                            appData['data'] = 'Error Occured!';\r\n                            appData['satusCode'] = 400;\r\n                            appData.error = err;\r\n                            reject(appData);\r\n                           // res.status(err.satusCode).json(err);\r\n                        });\r\n                        //res.status(201).json(appData);\r\n                    } else {\r\n                        console.log('got error '+err);\r\n                        appData['data'] = 'Error Occured!';\r\n                        appData['satusCode'] = 400;\r\n                        appData.error = err;\r\n                        reject(appData);\r\n                        //res.status(400).json(err);\r\n                    }\r\n                });\r\n            });\r\n        \r\n    })\r\n\r\n    getDetails = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection) => {\r\n            if(err){\r\n                console.log('got error '+err);\r\n                appData['satusCode'] = 500;\r\n                appData.error = err;\r\n                reject(appData);\r\n            } else {\r\n            connection.query(`select * from ${req.params.tableName}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('select query working fine '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        }\r\n        });\r\n        \r\n    })\r\n\r\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('select query working fine '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    \r\n                        console.log('pending payment successfully updated '+rows);\r\n                        appData.error = 0;\r\n                        appData['dbResponse'] = rows;\r\n                        appData['satusCode'] = 201;\r\n                        resolve(appData);\r\n                    \r\n\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updatePaymentHistory = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        const currentDate = new Date();\r\n        database.connection.getConnection((err, connection) => {\r\n            connection.query(`insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${req.body.flatid},${req.body.pendingPayment},'${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }','${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }',${req.body.ownerid});`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('pending payment history successfully updated '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n    registerBuilding = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query(`insert into building(buildingname, societyid) values\r\n         ('${req.body.buildingName}',${req.body.societyid});`,function(err, rows) {\r\n            //console.log(temp.sql);\r\n            connection.release();\r\n            if (!err) {\r\n                console.log('pending payment history successfully updated '+rows);\r\n                appData.error = 0;\r\n                appData['dbResponse'] = rows;\r\n                appData['satusCode'] = 201;\r\n                resolve(appData);\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log('got error '+err);\r\n                appData['satusCode'] = 400;\r\n                appData.error = err;\r\n                reject(appData);\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n        });\r\n        \r\n    })\r\n\r\n    registerSociety = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('Society is successfully Inserted'+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    registerFlat = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`insert into flat(flatname, buildingname, societyid, ownerid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId}, ${req.body.ownerId});`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('flat is successfully Inserted'+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    deleteRow = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                connection.release();\r\n                if (!err) {\r\n                    console.log('delete successfully'+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error while deleting '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n}\r\n\r\nexport default SocietyModel;"]}