{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["process","env","SECRET_KEY","require","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","query","queryMediator","queryConnection","then","result","console","log","catch","err","getOwnerList","societyIds","body","length","buildingNames","flatIds","updateFlat","updateValue","registerOwner","flatData","societyId","buildingName","flatNumber","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","isAdmin","age","gender","password","fetchOwnerResponse","dbResponse","ownerid","insertMappingResponse","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","pendingPayment","flatid","updatePaymentHistory","currentDate","Date","toISOString","replace","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","flatName","updateBuilding","updateSociety","updateOwner","deleteRow","columnValue","QueryMediator"],"mappings":"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","file":"societyModel.js","sourcesContent":["process.env.SECRET_KEY = 'varunv';\nimport QueryMediator from '../models/queryConnection';\nrequire(\"babel-core/register\");\nrequire(\"babel-polyfill\");\n\nclass SocietyModel {\n\n    constructor() {\n        this.queryMediator = new QueryMediator();\n    }\n\n    getOwner = (req, searchData) => new Promise((resolve, reject) => {\n        let query = `select ownerid from owner where phonenumber = ${searchData[0]} and email = \\'${searchData[1]}\\' `;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getOwner : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    getOwnerList = (req) => new Promise((resolve, reject) => {\n        var societyIds = (req.body.societyIds && req.body.societyIds.length > 0) ? `'${req.body.societyIds}'` : null;\n        var buildingNames = (req.body.buildingNames && req.body.buildingNames.length > 0) ? `'${req.body.buildingNames}'` : null;\n        var flatIds = (req.body.flatIds && req.body.flatIds.length > 0) ? `'${req.body.flatIds}'` : null;\n\n        let query = `call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`;\n        console.log(`call get_owner_details(${societyIds}, ${buildingNames}, ${flatIds})`);\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getOwnerList : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject) => {\n        console.log('searchData is ', searchData);\n        console.log('update value is ', updateValue);\n\n        let query = `update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and flatname = '${searchData[2]}'`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('updateFlat : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            console.log(`query is ------------ update flat set ownerid = ${updateValue} where societyid = ${searchData[0]} and buildingname = ${searchData[1]} and flatname = ${searchData[2]}`);\n            reject(err);\n        });\n    })\n\n    registerOwner = async (req) => {\n        var flatData = [req.body.societyId, req.body.buildingName, req.body.flatNumber];\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\n        var ownerInsertData = [[req.body.ownerName, req.body.isAdmin, req.body.phoneNumber, req.body.email, req.body.age, req.body.gender, req.body.password]];\n\n        let query = 'insert into owner(ownername,isadmin,phonenumber,email, age, gender, password) values ?';\n        try {\n            await this.queryMediator.queryConnection(query, ownerInsertData);\n            let fetchOwnerResponse = await this.getOwner(null, ownerSearchData);\n            let insertMappingResponse = await this.updateFlat(null, flatData, fetchOwnerResponse.dbResponse[0].ownerid);\n            console.log(\"Owner Registered Successfully: Ok\");\n            return insertMappingResponse;\n        } catch (err) {\n            console.log('got query error ', err);\n            return err;\n        }\n    }\n\n    getDetails = (req) => new Promise((resolve, reject) => {\n        console.log('req.params.tableName', req.params.tableName);\n        let query = `select * from ${req.params.tableName}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('getDetails : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject) => {\n        console.log('req.params.tableName', req.params.tableName);\n        let query = `select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('select query working fine : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject) => {\n        console.log('req.params.tableName', req.params.tableName);\n\n        let query = `update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('pending payment successfully updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    })\n\n    updatePaymentHistory = (req) => new Promise((resolve, reject) => {\n        const currentDate = new Date();\n\n        let query = `insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${req.body.flatid},${req.body.pendingPayment},'${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2')}','${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2')}',${req.body.ownerid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('pending payment history successfully updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerBuilding = (req) => new Promise((resolve, reject) => {\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Building is successfully Inserted: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerSociety = (req) => new Promise((resolve, reject) => {\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Society is successfully Inserted : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    registerFlat = (req) => new Promise((resolve, reject) => {\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Flat is successfully Inserted : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateBuilding = (req) => new Promise((resolve, reject) => {\n        let query = `insert into building(buildingname, societyid) values('${req.body.buildingName}',${req.body.societyid});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Building is successfully Updated: Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateSociety = (req) => new Promise((resolve, reject) => {\n        let query = `insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Society is successfully Updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateFlat = (req) => new Promise((resolve, reject) => {\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Flat is successfully Updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    updateOwner = (req) => new Promise((resolve, reject) => {\n        let query = `insert into flat(flatname, buildingname, societyid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId});`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('Flat is successfully Updated : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error ', err);\n            reject(err);\n        });\n    });\n\n    deleteRow = (req) => new Promise((resolve, reject) => {\n        let query = `delete from ${req.body.tableName} where ${req.body.columnName} = ${req.body.columnValue}`;\n        this.queryMediator.queryConnection(query).then((result) => {\n            console.log('delete successfully : Ok ');\n            resolve(result);\n        }).catch((err) => {\n            console.log('got query error while deleting ', err);\n            reject(err);\n        });\n    });\n}\n\nexport default SocietyModel;"]}