{"version":3,"sources":["../../../../server/modules/society/models/societyModel.js"],"names":["database","require","process","env","SECRET_KEY","SocietyModel","getOwner","req","searchData","Promise","resolve","reject","appData","connection","getConnection","err","query","rows","console","log","error","updateFlat","updateValue","registerOwner","flatData","body","societyId","buildingName","flatNumber","ownerSearchData","phoneNumber","email","ownerInsertData","ownerName","isAdmin","age","gender","password","then","response","JSON","stringify","dbResponse","ownerid","catch","getDetails","params","tableName","getDetailsUsingQueryParam","columnName","value","updatePendingPaymentOfFlat","pendingPayment","flatid","updatePaymentHistory","currentDate","Date","toISOString","replace","registerBuilding","societyid","registerSociety","societyName","address","pincode","registerFlat","flatName","ownerId"],"mappings":"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","file":"societyModel.js","sourcesContent":["var database = require('./../../../../database/database');\r\nprocess.env.SECRET_KEY = 'varunv';\r\n\r\nclass SocietyModel {\r\n\r\n    getOwner = (req, searchData) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query('select ownerid from owner where phonenumber = ? and email = ? ', searchData ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('select owner query working fine '+rows);\r\n                    appData.error = 0;\r\n                    appData['data'] = 'User registered successfully!';\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['data'] = 'Error Occured!';\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updateFlat = (req, searchData, updateValue) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        console.log('searchData is ',searchData);\r\n        console.log('update value is ', updateValue);\r\n        try {\r\n\r\n            database.connection.getConnection((err, connection)=> {\r\n                connection.query(`update flat set ownerid = ${updateValue} where \r\n        societyid = ${searchData[0]} and buildingname = '${searchData[1]}' and \r\n        flatname = '${searchData[2]}'` ,function(err, rows) {\r\n            //console.log(temp.sql);\r\n            if (!err) {\r\n                console.log('select owner query working fine '+rows);\r\n                appData.error = 0;\r\n                appData['data'] = 'User registered successfully!';\r\n                appData['dbResponse'] = rows;\r\n                appData['satusCode'] = 201;\r\n                resolve(appData);\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log('got error '+err);\r\n                console.log(`query is ------------ update flat set ownerid = ${updateValue} where \r\n                societyid = ${searchData[0]} and buildingname = ${searchData[1]} and \r\n                flatname = ${searchData[2]}`);\r\n                appData['data'] = 'Error Occured!';\r\n                appData['satusCode'] = 400;\r\n                appData.error = err;\r\n                reject(appData);\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n            });\r\n        \r\n        } catch(error){\r\n            console.log('got error------',error);\r\n            reject(error);\r\n\r\n        }\r\n    })\r\n\r\n\r\n    registerOwner = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        var flatData = [req.body.societyId,req.body.buildingName, req.body.flatNumber];\r\n        var ownerSearchData = [req.body.phoneNumber, req.body.email];\r\n        var ownerInsertData =[req.body.ownerName, req.body.isAdmin, req.body.phoneNumber, \r\n            req.body.email, req.body.age, req.body.gender, req.body.password\r\n            ];\r\n            database.connection.getConnection((err, connection) => {\r\n                connection.query('insert into owner(ownername,isadmin,phonenumber,email, age, gender, password) values (?,?,?,?,?,?,?)', ownerInsertData, (err) => {\r\n                    //console.log(temp.sql);\r\n                    if (!err) {\r\n        \r\n                        this.getOwner(null, ownerSearchData).then((response)=>{\r\n                            console.log('select owner query is working fine '+JSON.stringify(response));\r\n                            console.log('dbResponse.rows is ',JSON.stringify(response.dbResponse.rows));\r\n                            console.log('dbResponse.rows[0] is ',JSON.stringify(response.dbResponse));\r\n                            console.log('dbResponse.rows[0].ownerid is ',JSON.stringify(response.dbResponse[0].ownerid));\r\n        \r\n                            appData.error = 0;\r\n                            //appData[\"data\"] = \"Owner id is \"+dbResponse.rows[0].ownerid;\r\n                            appData['ownerid'] = response.dbResponse[0].ownerid;\r\n                            appData['satusCode'] = 201;\r\n                            //resolve(appData);\r\n                            return appData;\r\n                           // res.status(dbResponse.satusCode).json(dbResponse);\r\n                        }).then((appData)=>{\r\n                            resolve(this.updateFlat(null, flatData, appData.ownerid));\r\n                        }).catch((err)=>{\r\n                            console.log('got error '+err);\r\n                            appData['data'] = 'Error Occured!';\r\n                            appData['satusCode'] = 400;\r\n                            appData.error = err;\r\n                            reject(appData);\r\n                           // res.status(err.satusCode).json(err);\r\n                        });\r\n                        //res.status(201).json(appData);\r\n                    } else {\r\n                        console.log('got error '+err);\r\n                        appData['data'] = 'Error Occured!';\r\n                        appData['satusCode'] = 400;\r\n                        appData.error = err;\r\n                        reject(appData);\r\n                        //res.status(400).json(err);\r\n                    }\r\n                });\r\n            });\r\n        \r\n    })\r\n\r\n    getDetails = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection) => {\r\n            if(err){\r\n                console.log('got error '+err);\r\n                appData['satusCode'] = 500;\r\n                appData.error = err;\r\n                reject(appData);\r\n            } else {\r\n            connection.query(`select * from ${req.params.tableName}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('select query working fine '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        }\r\n        });\r\n        \r\n    })\r\n\r\n    getDetailsUsingQueryParam = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query(`select * from ${req.params.tableName} where ${req.params.columnName} = ${req.query.value}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('select query working fine '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updatePendingPaymentOfFlat = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n\r\n        console.log('req.params.tableName', req.params.tableName);\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`update flat set pendingpayment = '${req.body.pendingPayment}' where ownerid =${req.body.ownerid} and flatId =${req.body.flatid}` ,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    \r\n                        console.log('pending payment successfully updated '+rows);\r\n                        appData.error = 0;\r\n                        appData['dbResponse'] = rows;\r\n                        appData['satusCode'] = 201;\r\n                        resolve(appData);\r\n                    \r\n\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    updatePaymentHistory = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        const currentDate = new Date();\r\n        database.connection.getConnection((err, connection) => {\r\n            connection.query(`insert into paymenthistory(flatid,paid,createddate,updateddate,ownerid) values (${req.body.flatid},${req.body.pendingPayment},'${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }','${currentDate.toISOString().replace(/([^T]+)T([^\\.]+).*/g, '$1 $2') }',${req.body.ownerid});`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('pending payment history successfully updated '+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n    registerBuilding = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection)=> {\r\n            connection.query(`insert into building(buildingname, societyid) values\r\n         ('${req.body.buildingName}',${req.body.societyid});`,function(err, rows) {\r\n            //console.log(temp.sql);\r\n            if (!err) {\r\n                console.log('pending payment history successfully updated '+rows);\r\n                appData.error = 0;\r\n                appData['dbResponse'] = rows;\r\n                appData['satusCode'] = 201;\r\n                resolve(appData);\r\n                //res.status(201).json(appData);\r\n            } else {\r\n                console.log('got error '+err);\r\n                appData['satusCode'] = 400;\r\n                appData.error = err;\r\n                reject(appData);\r\n                //res.status(400).json(err);\r\n            }\r\n        });\r\n        });\r\n        \r\n    })\r\n\r\n    registerSociety = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`insert into society(societyName, address, pincode) values ('${req.body.societyName}', '${req.body.address}', '${req.body.pincode}');`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('Society is successfully Inserted'+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n\r\n    registerFlat = (req) => new Promise((resolve, reject)=>{\r\n        var appData = {\r\n            'error': 1,\r\n            'data': '',\r\n            'satusCode':'',\r\n            'dbResponse':''\r\n        };\r\n        database.connection.getConnection((err, connection) =>{\r\n            connection.query(`insert into flat(flatname, buildingname, societyid, ownerid) values ('${req.body.flatName}', '${req.body.buildingName}', ${req.body.societyId}, ${req.body.ownerId});`,function(err, rows) {\r\n                //console.log(temp.sql);\r\n                if (!err) {\r\n                    console.log('flat is successfully Inserted'+rows);\r\n                    appData.error = 0;\r\n                    appData['dbResponse'] = rows;\r\n                    appData['satusCode'] = 201;\r\n                    resolve(appData);\r\n                    //res.status(201).json(appData);\r\n                } else {\r\n                    console.log('got error '+err);\r\n                    appData['satusCode'] = 400;\r\n                    appData.error = err;\r\n                    reject(appData);\r\n                    //res.status(400).json(err);\r\n                }\r\n            });\r\n        });\r\n        \r\n    })\r\n}\r\n\r\nexport default SocietyModel;"]}