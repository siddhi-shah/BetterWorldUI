{"version":3,"sources":["../../../../server/modules/users/models/userModel.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserModel","executeQuery","req","Promise","resolve","reject","appData","query","body","console","log","connection","getConnection","err","rows","JSON","stringify","error","registerUser","res","today","Date","userData","email","first_name","last_name","password","phoneNumber","fields","loginUser","dbResponse","length","token","sign","expiresIn","isAdmin","isadmin","getUser"],"mappings":";;;;;;;;AAAA,IAAIA,WAAWC,QAAQ,iCAAR,CAAf;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,MAAMF,QAAQ,cAAR,CAAV;AACAG,QAAQC,GAAR,CAAYC,UAAZ,GAAyB,QAAzB;;IAEMC,S;;;SAEFC,Y,GAAe,UAACC,GAAD;AAAA,eAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnD,gBAAIC,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,0BAAS,EAHC;AAIV,0BAAS,EAJC;AAKV,0BAAS,EALC;AAMV,6BAAY;AANF,aAAd;AAQA,gBAAIC,QAAQL,IAAIM,IAAJ,CAASD,KAArB;AACAE,oBAAQC,GAAR,CAAY,cAAYH,KAAxB;AACAd,qBAASkB,UAAT,CAAoBC,aAApB,CAAkC,UAASC,GAAT,EAAcF,UAAd,EAA0B;AACxD,oBAAGE,GAAH,EAAO;AACHJ,4BAAQC,GAAR,CAAY,aAAZ,EAA0BG,GAA1B;AACAR,2BAAOQ,GAAP;AACH;AACDF,2BAAWJ,KAAX,CAAiBA,KAAjB,EAAwB,UAASM,GAAT,EAAcC,IAAd,EAAoB;AACxC,wBAAI,CAACD,GAAL,EAAU;AACNJ,gCAAQC,GAAR,CAAY,8CAA4CK,KAAKC,SAAL,CAAeF,IAAf,CAAxD;AACAR,gCAAQW,KAAR,GAAgB,CAAhB;AACAX,gCAAQ,QAAR,IAAoB,UAApB;AACAA,gCAAQ,WAAR,IAAuB,GAAvB;AACAA,gCAAQ,QAAR,IAAoBQ,IAApB;AACAV,gCAAQE,OAAR;AACA;AACH,qBARD,MAQO;AACHG,gCAAQC,GAAR,CAAY,qBAAmBG,GAA/B;AACAP,gCAAQ,MAAR,IAAkB,gBAAlB;AACAA,gCAAQ,WAAR,IAAuB,GAAvB;AACAA,gCAAQ,KAAR,IAAiBO,GAAjB;AACAT,gCAAQE,OAAR;AACA;AACH;AACJ,iBAjBD;AAkBH,aAvBD;AAwBP,SAnC2B,CAAT;AAAA,K;;SAsCfY,Y,GAAc,UAAChB,GAAD,EAAMiB,GAAN;AAAA,eAAc,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACvD,gBAAIe,QAAQ,IAAIC,IAAJ,EAAZ;AACA,gBAAIf,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,6BAAY,EAHF;AAIV,8BAAa;AAJH,aAAd;AAMA,gBAAIgB,WAAU,CAACpB,IAAIM,IAAJ,CAASe,KAAV,EAAiBrB,IAAIM,IAAJ,CAASgB,UAA1B,EAAsCtB,IAAIM,IAAJ,CAASiB,SAA/C,EAA0DvB,IAAIM,IAAJ,CAASkB,QAAnE,EAA6ExB,IAAIM,IAAJ,CAASmB,WAAtF,CAAd;AACAlC,qBAASkB,UAAT,CAAoBC,aAApB,CAAkC,UAASC,GAAT,EAAcF,UAAd,EAA0B;AACxDA,2BAAWJ,KAAX,CAAiB,iGAAjB,EAAoHe,QAApH,EAA8H,UAAST,GAAT,EAAcC,IAAd,EAAoBc,MAApB,EAA4B;AACtJ,wBAAI,CAACf,GAAL,EAAU;AACNJ,gCAAQC,GAAR,CAAY,2BAAyBI,IAArC;AACAR,gCAAQW,KAAR,GAAgB,CAAhB;AACAX,gCAAQ,MAAR,IAAkB,+BAAlB;AACAA,gCAAQ,WAAR,IAAuBQ,IAAvB;AACAR,gCAAQ,YAAR,IAAwB,GAAxB;AACAF,gCAAQE,OAAR;AACA;AACH,qBARD,MAQO;AACHG,gCAAQC,GAAR,CAAY,eAAaG,GAAzB;AACAP,gCAAQ,MAAR,IAAkB,gBAAlB;AACAA,gCAAQ,WAAR,IAAuB,GAAvB;AACAA,gCAAQW,KAAR,GAAgBJ,GAAhB;AACAT,gCAAQE,OAAR;AACA;AACH;AACJ,iBAjBD;AAkBH,aAnBD;AAqBH,SA9B2B,CAAd;AAAA,K;;SAgCduB,S,GAAY,UAAC3B,GAAD,EAAMiB,GAAN;AAAA,eAAc,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvD,gBAAIC,UAAU;AACV,yBAAS,CADC;AAEV,wBAAQ,EAFE;AAGV,6BAAY;AAHF,aAAd;AAKA,gBAAIiB,QAAQrB,IAAIM,IAAJ,CAASe,KAArB;AACA,gBAAIG,WAAWxB,IAAIM,IAAJ,CAASkB,QAAxB;AACAjB,oBAAQC,GAAR,CAAY,aAAWK,KAAKC,SAAL,CAAed,IAAIM,IAAnB,CAAvB;AACAf,qBAASkB,UAAT,CAAoBC,aAApB,CAAkC,UAASC,GAAT,EAAcF,UAAd,EAA0B;AACxDA,2BAAWJ,KAAX,CAAiB,qCAAjB,EAAwD,CAACgB,KAAD,CAAxD,EAAiE,UAASV,GAAT,EAAciB,UAAd,EAA0BF,MAA1B,EAAkC;AAC/F,wBAAIf,GAAJ,EAAS;AACLJ,gCAAQC,GAAR,CAAY,WAAZ;AACAD,gCAAQC,GAAR,CAAYG,GAAZ;AACAP,gCAAQW,KAAR,GAAgB,CAAhB;AACAX,gCAAQ,MAAR,IAAkB,gBAAlB;AACAA,gCAAQ,OAAR,IAAmBO,GAAnB;AACAP,gCAAQ,WAAR,IAAuB,GAAvB;AACAF,gCAAQE,OAAR;AACA;AACH,qBATD,MASO;AACHG,gCAAQC,GAAR,CAAY,cAAZ,EAA2BK,KAAKC,SAAL,CAAec,UAAf,CAA3B;AACA,4BAAIhB,OAAOgB,UAAX;AACArB,gCAAQC,GAAR,CAAYI,IAAZ;AACA,4BAAIA,KAAKiB,MAAL,GAAc,CAAlB,EAAqB;AACjBtB,oCAAQC,GAAR,CAAY,iBAAZ;AACA,gCAAII,KAAK,CAAL,EAAQY,QAAR,IAAoBA,QAAxB,EAAkC;AAC9BjB,wCAAQC,GAAR,CAAY,iBAAZ;AACAD,wCAAQC,GAAR,CAAY,aAAWK,KAAKC,SAAL,CAAeF,KAAK,CAAL,CAAf,CAAvB;AACA,oCAAIkB,QAAQpC,IAAIqC,IAAJ,CAASnB,KAAK,CAAL,CAAT,EAAkBjB,QAAQC,GAAR,CAAYC,UAA9B,EAA0C;AAClDmC,+CAAW;AADuC,iCAA1C,CAAZ;AAGA5B,wCAAQW,KAAR,GAAgB,CAAhB;AACAX,wCAAQ6B,OAAR,GAAkBrB,KAAK,CAAL,EAAQsB,OAA1B;AACA9B,wCAAQ,OAAR,IAAmB0B,KAAnB;AACA1B,wCAAQ,WAAR,IAAuB,GAAvB;AACAF,wCAAQE,OAAR;AACA;AACH,6BAZD,MAYO;AACHG,wCAAQC,GAAR,CAAY,qBAAZ;AACAJ,wCAAQW,KAAR,GAAgB,CAAhB;AACAX,wCAAQ,MAAR,IAAkB,mCAAlB;AACAA,wCAAQ,WAAR,IAAuB,GAAvB;AACAF,wCAAQE,OAAR;AACA;AACH;AACJ,yBAtBD,MAsBO;AACHG,oCAAQC,GAAR,CAAY,OAAZ;AACAJ,oCAAQW,KAAR,GAAgB,CAAhB;AACAX,oCAAQ,MAAR,IAAkB,wBAAlB;AACAA,oCAAQ,WAAR,IAAuB,GAAvB;AACAF,oCAAQE,OAAR;AACA;AACH;AACJ;AACJ,iBA7CD;AA+CH,aAhDD;AAmDH,SA5DyB,CAAd;AAAA,K;;SA8DZ+B,O,GAAU,UAACnC,GAAD,EAAMiB,GAAN;AAAA,eAAc,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrD,gBAAIC,UAAU,EAAd;AACAb,qBAASkB,UAAT,CAAoBC,aAApB,CAAkC,UAASC,GAAT,EAAcF,UAAd,EAA0B;AACxDA,2BAAWJ,KAAX,CAAiB,qBAAjB,EAAwC,UAASM,GAAT,EAAciB,UAAd,EAA0BF,MAA1B,EAAkC;AACtE,wBAAI,CAACf,GAAL,EAAU;AACN,4BAAIC,OAAOgB,UAAX;AACAxB,gCAAQ,OAAR,IAAmB,CAAnB;AACAA,gCAAQ,MAAR,IAAkBQ,IAAlB;AACAR,gCAAQ,WAAR,IAAuB,GAAvB;AACAF,gCAAQE,OAAR;AACA;AACH,qBAPD,MAOO;AACHA,gCAAQ,MAAR,IAAkB,eAAlB;AACAA,gCAAQ,WAAR,IAAuB,GAAvB;AACAD,+BAAOC,OAAP;AACA;AACH;AACJ,iBAdD;AAeH,aAhBD;AAkBH,SApBuB,CAAd;AAAA,K;;;kBAuBCN,S","file":"userModel.js","sourcesContent":["var database = require('./../../../../database/database');\nvar cors = require('cors')\nvar jwt = require('jsonwebtoken');\nprocess.env.SECRET_KEY = \"varunv\";\n\nclass UserModel {\n\n    executeQuery = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            \"error\": 1,\n            \"data\": \"\",\n            \"status\":\"\",\n            \"dbData\":\"\",\n            \"fields\":\"\",\n            \"satusCode\":\"\"\n        };\n        var query = req.body.query;\n        console.log(\"query is \"+query);\n        database.connection.getConnection(function(err, connection) {\n            if(err){\n                console.log(\"got error!!\",err);\n                reject(err);\n            }\n            connection.query(query, function(err, rows) {\n                if (!err) {\n                    console.log(\"query executed successfully successfully \"+JSON.stringify(rows));\n                    appData.error = 0;\n                    appData[\"status\"] = \"success!\";\n                    appData[\"satusCode\"] = 201;\n                    appData[\"dbData\"] = rows;\n                    resolve(appData)\n                    //res.status(201).json(appData);\n                } else {\n                    console.log(\"Query Exception \"+err);\n                    appData[\"data\"] = \"Error Occured!\";\n                    appData[\"satusCode\"] = 400;\n                    appData[\"err\"] = err;\n                    resolve(appData)\n                    //res.status(400).json(err);\n                }\n            });\n        })\n})\n\n\n    registerUser= (req, res) => new Promise((resolve, reject)=>{\n        var today = new Date();\n        var appData = {\n            \"error\": 1,\n            \"data\": \"\",\n            \"satusCode\":\"\",\n            \"dbResponse\":\"\"\n        };\n        var userData =[req.body.email, req.body.first_name, req.body.last_name, req.body.password, req.body.phoneNumber]\n        database.connection.getConnection(function(err, connection) {\n            connection.query('insert into users(email,first_name,last_name,password, phonenumber) values ($1, $2, $3, $4, $5)', userData, function(err, rows, fields) {\n                if (!err) {\n                    console.log(\"query is working fine \"+rows);\n                    appData.error = 0;\n                    appData[\"data\"] = \"User registered successfully!\";\n                    appData[\"satusCode\"] = rows;\n                    appData[\"dbResponse\"] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log(\"got error \"+err)\n                    appData[\"data\"] = \"Error Occured!\";\n                    appData[\"satusCode\"] = 400;\n                    appData.error = err;\n                    resolve(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        })\n        \n    })\n\n    loginUser = (req, res) => new Promise((resolve, reject) => {\n        var appData = {\n            \"error\": 1,\n            \"data\": \"\",\n            \"satusCode\":\"\"\n        };\n        var email = req.body.email;\n        var password = req.body.password;\n        console.log(\"data is \"+JSON.stringify(req.body));\n        database.connection.getConnection(function(err, connection) {\n            connection.query('SELECT * FROM owner WHERE email = ?', [email], function(err, dbResponse, fields) {\n                if (err) {\n                    console.log(\"error is \");\n                    console.log(err);\n                    appData.error = 1;\n                    appData[\"data\"] = \"Error Occured!\";\n                    appData[\"error\"] = err;\n                    appData[\"satusCode\"] = 400;\n                    resolve(appData);\n                    //res.status(400).json(appData);\n                } else {\n                    console.log(\"no error is \",JSON.stringify(dbResponse));\n                    let rows = dbResponse;\n                    console.log(rows);\n                    if (rows.length > 0) {\n                        console.log(\"rows.length is \");\n                        if (rows[0].password == password) {\n                            console.log(\"password match \");\n                            console.log(\"rows[0] \"+JSON.stringify(rows[0]));\n                            let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\n                                expiresIn: 1440\n                            });\n                            appData.error = 0;\n                            appData.isAdmin = rows[0].isadmin;\n                            appData[\"token\"] = token;\n                            appData[\"satusCode\"] = 200;\n                            resolve(appData);\n                            //res.status(200).json(appData);\n                        } else {\n                            console.log(\"password not match \");\n                            appData.error = 1;\n                            appData[\"data\"] = \"Email and Password does not match\";\n                            appData[\"satusCode\"] = 204;\n                            resolve(appData);\n                            //res.status(204).json(appData);\n                        }\n                    } else {\n                        console.log(\"else \");\n                        appData.error = 1;\n                        appData[\"data\"] = \"Email does not exists!\";\n                        appData[\"satusCode\"] = 204;\n                        resolve(appData);\n                        //res.status(204).json(appData);\n                    }\n                }\n            });\n\n        });\n       \n\n    });\n\n    getUser = (req, res) => new Promise((resolve, reject) => {\n        var appData = {};\n        database.connection.getConnection(function(err, connection) {\n            connection.query('SELECT * FROM owner', function(err, dbResponse, fields) {\n                if (!err) {\n                    let rows = dbResponse;\n                    appData[\"error\"] = 0;\n                    appData[\"data\"] = rows;\n                    appData[\"satusCode\"] = 200;\n                    resolve(appData);\n                    //res.status(200).json(appData);\n                } else {\n                    appData[\"data\"] = \"No data found\";\n                    appData[\"satusCode\"] = 204;\n                    reject(appData);\n                    //res.status(204).json(appData);\n                }\n            });\n        });\n       \n    });\n}\n\nexport default UserModel;"]}