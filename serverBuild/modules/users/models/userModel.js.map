{"version":3,"sources":["../../../../server/modules/users/models/userModel.js"],"names":["database","require","cors","jwt","process","env","SECRET_KEY","UserModel","executeQuery","req","Promise","resolve","reject","appData","query","body","console","log","connection","getConnection","err","rows","release","JSON","stringify","error","registerUser","res","today","Date","userData","email","first_name","last_name","password","phoneNumber","fields","loginUser","dbResponse","length","token","sign","expiresIn","isAdmin","isadmin","getUser"],"mappings":"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","file":"userModel.js","sourcesContent":["var database = require('./../../../../database/database');\nvar cors = require('cors');\nvar jwt = require('jsonwebtoken');\nprocess.env.SECRET_KEY = 'varunv';\n\nclass UserModel {\n\n    executeQuery = (req) => new Promise((resolve, reject)=>{\n        var appData = {\n            'error': 1,\n            'data': '',\n            'status':'',\n            'dbData':'',\n            'fields':'',\n            'satusCode':''\n        };\n        var query = req.body.query;\n        console.log('query is '+query);\n        database.connection.getConnection(function(err, connection) {\n            if(err){\n                console.log('got error!!',err);\n                reject(err);\n            }\n            connection.query(query, function(err, rows) {\n                connection.release();\n                if (!err) {\n                    console.log('query executed successfully successfully '+JSON.stringify(rows));\n                    appData.error = 0;\n                    appData['status'] = 'success!';\n                    appData['satusCode'] = 201;\n                    appData['dbData'] = rows;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('Query Exception '+err);\n                    appData['data'] = 'Error Occured!';\n                    appData['satusCode'] = 400;\n                    appData['err'] = err;\n                    resolve(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n})\n\n\n    registerUser= (req, res) => new Promise((resolve, reject)=>{\n        var today = new Date();\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':'',\n            'dbResponse':''\n        };\n        var userData =[req.body.email, req.body.first_name, req.body.last_name, req.body.password, req.body.phoneNumber];\n        database.connection.getConnection(function(err, connection) {\n            connection.query('insert into users(email,first_name,last_name,password, phonenumber) values ($1, $2, $3, $4, $5)', userData, function(err, rows, fields) {\n                connection.release();\n                if (!err) {\n                    console.log('query is working fine '+rows);\n                    appData.error = 0;\n                    appData['data'] = 'User registered successfully!';\n                    appData['satusCode'] = rows;\n                    appData['dbResponse'] = 201;\n                    resolve(appData);\n                    //res.status(201).json(appData);\n                } else {\n                    console.log('got error '+err);\n                    appData['data'] = 'Error Occured!';\n                    appData['satusCode'] = 400;\n                    appData.error = err;\n                    resolve(appData);\n                    //res.status(400).json(err);\n                }\n            });\n        });\n        \n    })\n\n    loginUser = (req, res) => new Promise((resolve, reject) => {\n        var appData = {\n            'error': 1,\n            'data': '',\n            'satusCode':''\n        };\n        var email = req.body.email;\n        var password = req.body.password;\n        console.log('data is '+JSON.stringify(req.body));\n        database.connection.getConnection(function(err, connection) {\n            connection.query('SELECT * FROM owner WHERE email = ?', [email], function(err, dbResponse, fields) {\n                connection.release();\n                if (err) {\n                    console.log('error is ');\n                    console.log(err);\n                    appData.error = 1;\n                    appData['data'] = 'Error Occured!';\n                    appData['error'] = err;\n                    appData['satusCode'] = 400;\n                    resolve(appData);\n                    //res.status(400).json(appData);\n                } else {\n                    console.log('no error is ',JSON.stringify(dbResponse));\n                    let rows = dbResponse;\n                    console.log(rows);\n                    if (rows.length > 0) {\n                        console.log('rows.length is ');\n                        if (rows[0].password == password) {\n                            console.log('password match ');\n                            console.log('rows[0] '+JSON.stringify(rows[0]));\n                            let token = jwt.sign(rows[0], process.env.SECRET_KEY, {\n                                expiresIn: 1440\n                            });\n                            appData.error = 0;\n                            appData.isAdmin = rows[0].isadmin;\n                            appData['token'] = token;\n                            appData['satusCode'] = 200;\n                            resolve(appData);\n                            //res.status(200).json(appData);\n                        } else {\n                            console.log('password not match ');\n                            appData.error = 1;\n                            appData['data'] = 'Email and Password does not match';\n                            appData['satusCode'] = 200;\n                            reject(appData);\n                            //res.status(204).json(appData);\n                        }\n                    } else {\n                        console.log('else ');\n                        appData.error = 1;\n                        appData['data'] = 'Email does not exists!';\n                        appData['satusCode'] = 404;\n                        reject(appData);\n                        //res.status(204).json(appData);\n                    }\n                }\n            });\n\n        });\n       \n\n    });\n\n    getUser = (req, res) => new Promise((resolve, reject) => {\n        var appData = {};\n        database.connection.getConnection(function(err, connection) {\n            connection.query('SELECT * FROM owner', function(err, dbResponse, fields) {\n                connection.release();\n                if (!err) {\n                    let rows = dbResponse;\n                    appData['error'] = 0;\n                    appData['data'] = rows;\n                    appData['satusCode'] = 200;\n                    resolve(appData);\n                    //res.status(200).json(appData);\n                } else {\n                    appData['data'] = 'No data found';\n                    appData['satusCode'] = 200;\n                    reject(appData);\n                    //res.status(204).json(appData);\n                }\n            });\n        });\n       \n    });\n}\n\nexport default UserModel;"]}